import secrets
import string
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, insert, update
from db import AsyncSessionLocal
from models import Faculty, AdminInvite, User
from roles import Role
from filters import HasRoleFilter
from gsheets import check_access

router = Router()


class FacultyStates(StatesGroup):
    waiting_faculty_name = State()


class SheetStates(StatesGroup):
    waiting_sheet_url = State()


def generate_invite_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(20))


# –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –æ—Ç—Å—é–¥–∞, –æ–Ω —Ç–µ–ø–µ—Ä—å –≤ main.py


@router.callback_query(F.data == "faculties_menu", HasRoleFilter([Role.SUPERADMIN]))
async def faculties_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", callback_data="create_faculty")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤", callback_data="list_faculties")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.edit_text("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admins_menu", HasRoleFilter([Role.SUPERADMIN]))
async def admins_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∞–¥–º–∏–Ω–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="create_invite")],
        [InlineKeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="list_invites")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.edit_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "sheets_menu", HasRoleFilter([Role.SUPERADMIN]))
async def sheets_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é Google —Ç–∞–±–ª–∏—Ü"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="set_sheet")],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã", callback_data="check_sheets")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.edit_text("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google —Ç–∞–±–ª–∏—Ü–∞–º–∏", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "check_sheets", HasRoleFilter([Role.SUPERADMIN]))
async def check_all_sheets(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º"""
    # credentials.json –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å –≤ /app/bot/credentials.json (—Å–º–æ–Ω—Ç–∏—Ä—É–π —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
    credentials_path = "/app/bot/credentials.json"

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Faculty))
        faculties = result.scalars().all()

    if not faculties:
        await callback.message.edit_text("‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await callback.answer()
        return

    lines = ["–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–æ–≤ –∫ Google Sheets:\n"]
    for f in faculties:
        if not getattr(f, "google_sheet_url", None):
            lines.append(f"‚Ä¢ {f.name}: ‚ö†Ô∏è —Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞")
            continue
        ok, msg, title = check_access(credentials_path, f.google_sheet_url)
        status = "‚úÖ" if ok else "‚ùå"
        suffix = f" (—Ç–∞–±–ª–∏—Ü–∞: {title})" if ok and title else (f" ‚Äî {msg[:80]}" if not ok else "")
        lines.append(f"‚Ä¢ {f.name}: {status}{suffix}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="sheets_menu")]
    ])
    await callback.message.edit_text("\n".join(lines), reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "back_to_main", HasRoleFilter([Role.SUPERADMIN]))
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –§–∞–∫—É–ª—å—Ç–µ—Ç—ã", callback_data="faculties_menu")],
        [InlineKeyboardButton(text="üë• –ê–¥–º–∏–Ω—ã", callback_data="admins_menu")],
        [InlineKeyboardButton(text="üìä Google —Ç–∞–±–ª–∏—Ü—ã", callback_data="sheets_menu")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
    ])
    await callback.message.edit_text("üîß –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "create_faculty", HasRoleFilter([Role.SUPERADMIN]))
async def create_faculty_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
    await state.set_state(FacultyStates.waiting_faculty_name)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: –§–ö–ù, –§–ò–í–¢, –§–£–ü–ú"
    )
    await callback.answer()


@router.message(FacultyStates.waiting_faculty_name, F.text.regexp(r'^[–ê-–Ø–Å][–ê-–Ø–Å–∞-—è—ë\s]+$'))
async def create_faculty_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
    faculty_name = message.text.strip()
    
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        result = await session.execute(select(Faculty).where(Faculty.name == faculty_name))
        existing = result.scalar_one_or_none()
        
        if existing:
            await message.answer(f"‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç '{faculty_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        faculty = Faculty(name=faculty_name)
        session.add(faculty)
        await session.commit()
        await session.refresh(faculty)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        await message.answer(
            f"‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç '{faculty_name}' —Å–æ–∑–¥–∞–Ω!\nID: {faculty.id}",
            reply_markup=keyboard
        )
        await state.clear()


@router.callback_query(F.data == "list_faculties", HasRoleFilter([Role.SUPERADMIN]))
async def list_faculties(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Faculty))
        faculties = result.scalars().all()
        
        if not faculties:
            await callback.message.edit_text("‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await callback.answer()
            return
        
        text = "üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤:\n\n"
        for faculty in faculties:
            sheet_status = "üìä" if faculty.google_sheet_url else "‚ùå"
            text += f"{faculty.id}. {faculty.name} {sheet_status}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="faculties_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data == "create_invite", HasRoleFilter([Role.SUPERADMIN]))
async def create_invite_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Faculty))
        faculties = result.scalars().all()
        
        if not faculties:
            await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç!")
            await callback.answer()
            return
        
        keyboard_buttons = []
        for faculty in faculties:
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"{faculty.name}",
                callback_data=f"invite_faculty_{faculty.id}"
            )])
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admins_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:", reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data.startswith("invite_faculty_"), HasRoleFilter([Role.SUPERADMIN]))
async def create_invite_process(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
    faculty_id = int(callback.data.split("_")[2])
    
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        result = await session.execute(select(Faculty).where(Faculty.id == faculty_id))
        faculty = result.scalar_one_or_none()
        
        if not faculty:
            await callback.message.edit_text("‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await callback.answer()
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite_code = generate_invite_code()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite = AdminInvite(
            faculty_id=faculty_id,
            invite_code=invite_code,
            created_at=datetime.now().isoformat()
        )
        session.add(invite)
        await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        invite_link = f"https://t.me/otbor_2025_bot?start=admin_{invite_code}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admins_menu")]
        ])
        
        await callback.message.edit_text(
            f"üîó –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ '{faculty.name}':\n\n"
            f"`{invite_link}`\n\n"
            f"–ö–æ–¥: `{invite_code}`",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await callback.answer()


@router.callback_query(F.data == "list_invites", HasRoleFilter([Role.SUPERADMIN]))
async def list_invites(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(AdminInvite, Faculty)
            .join(Faculty, AdminInvite.faculty_id == Faculty.id)
            .where(AdminInvite.is_used == False)
        )
        invites = result.all()
        
        if not invites:
            await callback.message.edit_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–µ—Ç")
            await callback.answer()
            return
        
        text = "üîó –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n\n"
        for invite, faculty in invites:
            text += f"‚Ä¢ {faculty.name} - –∫–æ–¥: `{invite.invite_code}`\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admins_menu")]
        ])
        await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data == "set_sheet", HasRoleFilter([Role.SUPERADMIN]))
async def set_sheet_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏–≤—è–∑–∫–∏ Google —Ç–∞–±–ª–∏—Ü—ã"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Faculty))
        faculties = result.scalars().all()
        
        if not faculties:
            await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç!")
            await callback.answer()
            return
        
        keyboard_buttons = []
        for faculty in faculties:
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"{faculty.name}",
                callback_data=f"sheet_faculty_{faculty.id}"
            )])
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="sheets_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Google —Ç–∞–±–ª–∏—Ü—ã:", reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data.startswith("sheet_faculty_"), HasRoleFilter([Role.SUPERADMIN]))
async def set_sheet_process(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–≤—è–∑–∫–∞ Google —Ç–∞–±–ª–∏—Ü—ã –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É"""
    faculty_id = int(callback.data.split("_")[2])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Faculty).where(Faculty.id == faculty_id))
        faculty = result.scalar_one_or_none()
        
        if not faculty:
            await callback.message.edit_text("‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await callback.answer()
            return
        
        await state.set_state(SheetStates.waiting_sheet_url)
        await state.update_data(faculty_id=faculty_id)
        await callback.message.edit_text(
            f"üìä –í–≤–µ–¥–∏—Ç–µ URL Google —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ '{faculty.name}':\n\n"
            f"–ü—Ä–∏–º–µ—Ä: https://docs.google.com/spreadsheets/d/..."
        )
        await callback.answer()


@router.message(SheetStates.waiting_sheet_url, F.text.regexp(r'^https://docs\.google\.com/spreadsheets/'))
async def set_sheet_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL Google —Ç–∞–±–ª–∏—Ü—ã"""
    sheet_url = message.text.strip()
    data = await state.get_data()
    faculty_id = data.get('faculty_id')
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Faculty).where(Faculty.id == faculty_id))
        faculty = result.scalar_one_or_none()
        
        if not faculty:
            await message.answer("‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º URL —Ç–∞–±–ª–∏—Ü—ã
        await session.execute(
            update(Faculty)
            .where(Faculty.id == faculty_id)
            .values(google_sheet_url=sheet_url)
        )
        await session.commit()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        await message.answer(
            f"‚úÖ Google —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É '{faculty.name}'",
            reply_markup=keyboard
        )
        await state.clear()


@router.callback_query(F.data == "help", HasRoleFilter([Role.SUPERADMIN]))
async def help_menu(callback: CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞"""
    help_text = """
üîß –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞

üìã –§–∞–∫—É–ª—å—Ç–µ—Ç—ã:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤

üë• –ê–¥–º–∏–Ω—ã:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π

üìä Google —Ç–∞–±–ª–∏—Ü—ã:
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ —Ç–∞–±–ª–∏—Ü –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º

‚ÑπÔ∏è –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    await callback.message.edit_text(help_text, reply_markup=keyboard)
    await callback.answer()
