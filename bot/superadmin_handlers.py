import secrets
import string
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from sqlalchemy import select, insert, update
from db import AsyncSessionLocal
from models import Faculty, AdminInvite, User
from roles import Role

router = Router()


def generate_invite_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(20))


@router.message(Command("start"))
async def superadmin_main_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –§–∞–∫—É–ª—å—Ç–µ—Ç—ã", callback_data="faculties_menu")],
        [InlineKeyboardButton(text="üë• –ê–¥–º–∏–Ω—ã", callback_data="admins_menu")],
        [InlineKeyboardButton(text="üìä Google —Ç–∞–±–ª–∏—Ü—ã", callback_data="sheets_menu")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
    ])
    await message.answer("üîß –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞", reply_markup=keyboard)


@router.callback_query(F.data == "faculties_menu")
async def faculties_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", callback_data="create_faculty")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤", callback_data="list_faculties")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.edit_text("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admins_menu")
async def admins_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∞–¥–º–∏–Ω–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="create_invite")],
        [InlineKeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="list_invites")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.edit_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "sheets_menu")
async def sheets_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é Google —Ç–∞–±–ª–∏—Ü"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="set_sheet")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.edit_text("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google —Ç–∞–±–ª–∏—Ü–∞–º–∏", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –§–∞–∫—É–ª—å—Ç–µ—Ç—ã", callback_data="faculties_menu")],
        [InlineKeyboardButton(text="üë• –ê–¥–º–∏–Ω—ã", callback_data="admins_menu")],
        [InlineKeyboardButton(text="üìä Google —Ç–∞–±–ª–∏—Ü—ã", callback_data="sheets_menu")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
    ])
    await callback.message.edit_text("üîß –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "create_faculty")
async def create_faculty_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: –§–ö–ù, –§–ò–í–¢, –§–£–ü–ú"
    )
    await callback.answer()


@router.message(F.text.regexp(r'^[–ê-–Ø–Å][–ê-–Ø–Å–∞-—è—ë\s]+$'))
async def create_faculty_process(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
    faculty_name = message.text.strip()
    
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        result = await session.execute(select(Faculty).where(Faculty.name == faculty_name))
        existing = result.scalar_one_or_none()
        
        if existing:
            await message.answer(f"‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç '{faculty_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        faculty = Faculty(name=faculty_name)
        session.add(faculty)
        await session.commit()
        await session.refresh(faculty)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        await message.answer(
            f"‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç '{faculty_name}' —Å–æ–∑–¥–∞–Ω!\nID: {faculty.id}",
            reply_markup=keyboard
        )


@router.callback_query(F.data == "list_faculties")
async def list_faculties(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Faculty))
        faculties = result.scalars().all()
        
        if not faculties:
            await callback.message.edit_text("‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await callback.answer()
            return
        
        text = "üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤:\n\n"
        for faculty in faculties:
            sheet_status = "üìä" if faculty.google_sheet_url else "‚ùå"
            text += f"{faculty.id}. {faculty.name} {sheet_status}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="faculties_menu")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data == "create_invite")
async def create_invite_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Faculty))
        faculties = result.scalars().all()
        
        if not faculties:
            await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç!")
            await callback.answer()
            return
        
        keyboard_buttons = []
        for faculty in faculties:
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"{faculty.name}",
                callback_data=f"invite_faculty_{faculty.id}"
            )])
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admins_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:", reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data.startswith("invite_faculty_"))
async def create_invite_process(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
    faculty_id = int(callback.data.split("_")[2])
    
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        result = await session.execute(select(Faculty).where(Faculty.id == faculty_id))
        faculty = result.scalar_one_or_none()
        
        if not faculty:
            await callback.message.edit_text("‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await callback.answer()
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite_code = generate_invite_code()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite = AdminInvite(
            faculty_id=faculty_id,
            invite_code=invite_code,
            created_at=datetime.now().isoformat()
        )
        session.add(invite)
        await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        invite_link = f"https://t.me/your_bot_username?start=admin_{invite_code}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admins_menu")]
        ])
        
        await callback.message.edit_text(
            f"üîó –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ '{faculty.name}':\n\n"
            f"`{invite_link}`\n\n"
            f"–ö–æ–¥: `{invite_code}`",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await callback.answer()


@router.callback_query(F.data == "list_invites")
async def list_invites(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(AdminInvite, Faculty)
            .join(Faculty, AdminInvite.faculty_id == Faculty.id)
            .where(AdminInvite.is_used == False)
        )
        invites = result.all()
        
        if not invites:
            await callback.message.edit_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–µ—Ç")
            await callback.answer()
            return
        
        text = "üîó –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n\n"
        for invite, faculty in invites:
            text += f"‚Ä¢ {faculty.name} - –∫–æ–¥: `{invite.invite_code}`\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admins_menu")]
        ])
        await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data == "set_sheet")
async def set_sheet_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏–≤—è–∑–∫–∏ Google —Ç–∞–±–ª–∏—Ü—ã"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Faculty))
        faculties = result.scalars().all()
        
        if not faculties:
            await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç!")
            await callback.answer()
            return
        
        keyboard_buttons = []
        for faculty in faculties:
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"{faculty.name}",
                callback_data=f"sheet_faculty_{faculty.id}"
            )])
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="sheets_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Google —Ç–∞–±–ª–∏—Ü—ã:", reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data.startswith("sheet_faculty_"))
async def set_sheet_process(callback: CallbackQuery):
    """–ü—Ä–∏–≤—è–∑–∫–∞ Google —Ç–∞–±–ª–∏—Ü—ã –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É"""
    faculty_id = int(callback.data.split("_")[2])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Faculty).where(Faculty.id == faculty_id))
        faculty = result.scalar_one_or_none()
        
        if not faculty:
            await callback.message.edit_text("‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"üìä –í–≤–µ–¥–∏—Ç–µ URL Google —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ '{faculty.name}':\n\n"
            f"–ü—Ä–∏–º–µ—Ä: https://docs.google.com/spreadsheets/d/..."
        )
        await callback.answer()


@router.message(F.text.regexp(r'^https://docs\.google\.com/spreadsheets/'))
async def set_sheet_url(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL Google —Ç–∞–±–ª–∏—Ü—ã"""
    sheet_url = message.text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º faculty_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("üìä URL –ø–æ–ª—É—á–µ–Ω! –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –±—É–¥–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–∞.")


@router.callback_query(F.data == "help")
async def help_menu(callback: CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞"""
    help_text = """
üîß –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞

üìã –§–∞–∫—É–ª—å—Ç–µ—Ç—ã:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤

üë• –ê–¥–º–∏–Ω—ã:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π

üìä Google —Ç–∞–±–ª–∏—Ü—ã:
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ —Ç–∞–±–ª–∏—Ü –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º

‚ÑπÔ∏è –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    await callback.message.edit_text(help_text, reply_markup=keyboard)
    await callback.answer()
