import secrets
import string
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update
from passlib.hash import bcrypt
from db import AsyncSessionLocal
from models import AdminInvite, User, Faculty
from roles import Role


router = Router()


class ClaimAdminStates(StatesGroup):
    waiting_code = State()


def generate_credentials() -> tuple[str, str]:
    login = f"admin_{secrets.randbelow(10000):04d}"
    password = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(10))
    return login, password


@router.message(Command("iamadmin"))
async def iamadmin_start(message: Message, state: FSMContext):
    await state.set_state(ClaimAdminStates.waiting_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:")


@router.message(ClaimAdminStates.waiting_code)
async def iamadmin_process_code(message: Message, state: FSMContext):
    code = message.text.strip()
    if not code:
        await message.answer("–ö–æ–¥ –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return

    async with AsyncSessionLocal() as session:
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É
        result = await session.execute(
            select(AdminInvite).where(AdminInvite.invite_code == code, AdminInvite.is_used == False)
        )
        invite = result.scalar_one_or_none()

        if not invite:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        fac_res = await session.execute(select(Faculty).where(Faculty.id == invite.faculty_id))
        faculty = fac_res.scalar_one_or_none()
        if not faculty:
            await message.answer("‚ùå –°–≤—è–∑–∞–Ω–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        user_res = await session.execute(select(User).where(User.tg_id == str(message.from_user.id)))
        user = user_res.scalar_one_or_none()

        created_credentials_text = ""
        if user is None:
            login, password = generate_credentials()
            user = User(
                username=login,
                password_hash=bcrypt.hash(password),
                full_name=f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip() or None,
                tg_id=str(message.from_user.id),
                faculty_id=invite.faculty_id,
                role=Role.ADMIN.value,
                is_active=True,
            )
            session.add(user)
            created_credentials_text = f"\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç:\nüë§ –õ–æ–≥–∏–Ω: `{login}`\nüîë –ü–∞—Ä–æ–ª—å: `{password}`"
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.role = Role.ADMIN.value
            user.faculty_id = invite.faculty_id
            session.add(user)

        # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        await session.execute(
            update(AdminInvite).where(AdminInvite.id == invite.id).values(is_used=True)
        )

        await session.commit()

        await message.answer(
            f"‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞: {faculty.name}.{created_credentials_text}",
            parse_mode="Markdown"
        )
        await state.clear()

